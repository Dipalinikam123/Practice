1. why we node . sql and mongo db
event driven 

#------ ------ what is node js---------------?
=> Node is not a language or framework.
  * node /node.js a runtime environment for executing javascript code on the server side.
  * Runtime Environment = A runtime environment refers to the software infrastructure that help to execution a program.it also translate a high-level-language to machine code.

#------ ----- How node is runtime environment on server side? what is v8-------------------------?
=> how javascript code work in client side or browser?.. with the help of v8 is javascript engine for chrome browser , v8 engine execute our code end display in browser.
  * then how node js made and run ?
=> node js is combination of v8 engine or C++ , to execute javascript code outside the browser
node js is similar to browser only difference is browser run javascript code in client side and nodejs execute javascript on the server.  

# ----------- what is the difference between Runtime environment & Framework------------- ?
 * Runtime Environment (node js):- primarily focuses on providing the necessary infrastructure for code execution, including services like memory management and i/o operation.
 * Framework (Express is framework): primarily focuses on simplifying the development process by offering a structured set of tools, libraries, and best practice

# ----------- difference between client side or server side -------------
                             * client side (browser)              Server side (node js./ server)
  Environment location  :-   Runs on the user's web browser.        Runs on the server.
  Primary Language      :-   HTML, CSS, javascript,                 Javascript.
  Document/Windows/     :-   Yes                                     NO
  Navigator/Event Object 
  Req/Res/Server/DB Object :- No                                     Yes
  Responsibilities       :- Handle UI display, interaction and       Handle business logic, data storage/ access, authentication,authorization
                                client side logic

#----------------- 7 main feature of node js ---------------------
1. single threaded 2. Asynchronous 3. Event-Driven 4.v8 javascript engine 5.cross platform 6.NPM 7. Real-time capabilities (like chats)

#----------------- what is single threaded programming--------------?
=> a program's code is executed line after line and there can't be two lines of a program running at the same time.

#----------------- what is synchronous programming---------------?
=> Synchronous means 'wait for me to finish before doing something else.

#----------------- what is Asynchronous programming---------------?
  In node js, asynchronous flow can be achieved by its single threaded, non blocking, and event-driven architecture
=> In Node js, if there are 4 tasks (Task1,Task2,Task3,Task4) to be completed for an event. then below steps will be executed.
   1. First, thread will be created.
   2. Thread T1 initiates Task1, but it won't wait for Task1 to complete. instead, T1 proceeds to initiate Task2, then Task3 and Task4 (This asynchronous execution allows T1 to efficiently handle multiple task concurrently).
   3. Whenever Task1 completes, an event is emitted.
   4.Thread T1, being event-driven, promptly responds to this event, interrupting its current task and delivering the result of Task1.

#--------- What are Event, Event Emitter, Event Queue, Event Loop & Event Driven?--------- 
 * Event: A notification or signal that something has happened in the system (e.g., user actions, timers)..
 * Event Emitter: Create or emit event 
 * Event Handler : An event handler is a function or callback that is executed in response to a specific event, such as a click, 
    input, or timer  event, when that event occurs.
 * Event Queue: all the generated events store in queue in node. which event generate first that store first like: |E3|,|E2|,|E1| after this .
 * Event Loop : node libraries pick event in FIFA order of the queue and execute them in the order they were added. ex;-event loop  pick E1 
    event and perform code on E1 it's called as Event handler, event handler is function, also called as event listener, after completing this node library pick E2 and same event handler perform code on E2 , after this E3, E4 it's called as  Event loop.
 * Event Driven architecture:- it means operations in node are drive or based by events. 
   ---- ** node js architecture:= client req =>stored in event queue => event loop pick first req (event loop always watch on queue) => process => return response to client  

#------------- Feature And Advantages of node js--------------------

  *Feature                           *Advantages
1. Asynchronous                    Enable Handling multiple concurrent request & non-blocking execution of thread 
2. v8 Engine                       Built on the v8 js engine from google chrome, node js executes code fast.
3. Event-driven architecture       efficient handling event. Great for real time application like chat application, gaming application
                                   (using web  socket) where bidirectional communication is required.
4. cross-platform                  support deployment in various operating systems, enhancing flexibility.
5. javascript                      coding in js language therefor no need to learn a new language.
                                  Suitable for building scalable application that can handle increase loads.

#-------------what is module---------------
=> * A module contains a specific functionality that can be easily reused within a node js application.
   * ideally  in node.js file can be treated as a module.  
     ex:- function sayHello(){
              console.log("hello")
          }
    module.exports= sayHello;  
           or 
    export.sayHello= function(){console.log("hello")}  (no need to separate export module)

   ----*** if we have multiple function to export then we need to export like this = module.exports.sayHello=sayHello
  
----------* Types of Module *------------
  3 types of module in node js
1. built-in module = already present modules in node js like- http, fs etc
2. local module = local module that we as a developer create in our project 
3. third-party module = external packages or library,, to use them we need to install in our project

------------------ Top 5 Built in modules ------------------
1.fs , 2.path , 3.os , 4.events, 5.http

#---------Explain the role of fs module? name some function of it?
  File System:- fs(file system) module in node provides a set of methods for interacting with the file system.
 => fs module is used for managing files. 
  const fs= require('fs')
  * fs.readFile("data.txt","utf-8",(err,data)=>{ console.log(data) }) //  reading file content asynchronously
  * fs.writeFile("data.txt","hello node","utf-8",(err)=>{ console.log("write operation complete") }) //  reading file content asynchronously
  * fs.appendFile() is used to add (append) data to an existing file. If the file doesn't exist, it creates a new file and writes the data to it. 
  * fs.unlink() :- delete the specific file
  * fs.readdir():- read the contents of a directory.
  * fs.mkdir() :- create new directory. 
  * fs.rmdir() :- removes the specific directory.
#---------Explain the role of path module ? name some function of it?
    const path = require('path');
  * Joins multiple path segments into one, handling any necessary separators.
    const newPath = path.join('/home', 'user', 'docs', 'file.txt');
    console.log(newPath); // Output: /home/user/docs/file.txt
  * path.parse():
    Returns an object with information about the different parts of the path (root, dir, base, ext, name).
    const parsedPath = path.parse('/home/user/docs/file.txt');
    console.log(parsedPath);
    Output:  {  root: '/', dir: '/home/user/docs', base: 'file.txt', ext: '.txt', name: 'file' }
    etc....
#---------Explain the role of os module ? name some function of it?
=>  The os module in node.js provides a set of methods for interacting with operating system
const os = require('os');
console.log(os.type());  // platform information
console.log(os.userInfo());  // get current user information ,,, etc

#---------Explain the role of event module ? How to handle events in node ?
 => * Event module is used to handle events.
    * EventEmitter class of events module is used to register event listeners and emit event
    * An event listener is a function that will be executed when a particular event occurs. 
    * on() method is used to register event listener

#------------- what is event argument---------------------
=> event argument refer to the additional information or data that can be passed along with an emitted event
 
#------------- what is the difference between a function and event---------------------
* Function => function is a reusable block of code that perform a specific task when invoked or called
* event =>  event represent action that can be observed and responded to. Event will call function internally.

#------------What is the role of  http module in node ?--------------
=> The HTTP module can create an HTTP server that listen to server port and give a specific response to client.

#------------What is the role of createServer() module of http module ?--------------
=> The createServer() method of http module in node js , is used to create an HTTP server 














# -------what is module ?
=> In Node.js, a module is a reusable piece of code that encapsulates functionality and can be imported into other files. 
      Each file is treated as a separate module. You can export functionality from one module and import it into another.Node.js uses the CommonJS module format. 
    * Exporting: To share functionality from a module, you use module.exports or exports.
    * Importing: You can import a module using the require() function.
    * node js support also ES6 import export module, for this we need to create package.json file in write {"type":"module"}

# -------Core Module=The module we have to import its called as core module,
  like buffer, HTTP, fs , when we want to use them, we need to import them,(const fs= require('fs'))
# -------Global Module= like console.log

# -------what is HTTP?
 => HTTP, or Hypertext Transfer Protocol, is a protocol used for transferring data over the web. It facilitates communication between web browsers and servers, allowing users to access websites, images, videos, and other content. When you enter a URL in your browser, it sends an HTTP request to the server hosting that content, which then responds with the requested data. HTTP is the foundation of data communication on the internet.

# -------what HTTP module do?
 => handle server's request and response in node js

-------(req,res)=>
  req => The req object represents the HTTP request made by the client. It contains information about the request.
   Request Parameters:
     * req.params: Contains route parameters (e.g., /users/:id would make req.params.id accessible).
   Query Parameters:
     * req.query: Contains query string parameters (e.g., /search?term=Node would make req.query.term accessible).
   Body:
     * req.body: Contains data sent in the request body (useful for POST and PUT requests). You typically need middleware like body-parser to parse JSON or URL-encoded data.
   Headers:
     * req.headers: Contains HTTP headers sent with the request.
   Method:
     * req.method: Indicates the HTTP method (GET, POST, etc.) used for the request.
   URL:
     * req.url: Contains the URL of the request.
      res =>The res object represents the HTTP response that the server sends back to the client. It provides methods to send data, set headers, and manage the response status.
--------------------------------------------------------------------
-------res=> The res object represents the HTTP response that the server sends back to the client. It provides methods to send data, 
       set headers, and manage the response status. 
    Sending a Response:
       * res.send(): Sends a response of various types (string, object, etc.).
       * res.json(): Sends a JSON response.
       * res.sendFile(): Sends a file as a response.
    Setting Status Codes:
       * res.status(code): Sets the HTTP status code for the response.
    Setting Headers:
       * res.set(headerName, value): Sets a specific HTTP header.
    Redirecting:
       * res.redirect(url): Redirects the client to a different URL.

-------------------------------------------------------------------------------------------------------------------------------------

# ------ File System (fs)-----
=> This module allows you to perform operations like reading, writing, updating, and deleting files and directories.
   *fs.readFileSync(note.txt) it's work synchronously

# what is Buffer ?
=>In Node.js, a Buffer is a built-in object that provides a way to handle binary data directly. Buffers are especially useful for working with streams, files, and network communications where raw binary data is involved.

# Differance between Asynchronous and  Synchronous?
=>synchronous and synchronous programming are two different paradigms for handling operations, especially in the context of I/O tasks like reading files or making network requests.

----------Synchronous Programming
  * Execution Order: In synchronous programming, tasks are executed one after the other. Each task must complete before the next one starts.
  * Blocking: Synchronous operations block the execution thread until the current task is finished. This means the program waits, which can lead to inefficiencies, especially with I/O operations.
  * Error Handling: Error handling can be straightforward, as each task is executed in sequence.

----------Asynchronous Programming
  * Execution Order: In asynchronous programming, tasks can be initiated without waiting for previous tasks to complete. Multiple tasks can be in progress simultaneously.
  * Non-blocking: Asynchronous operations do not block the execution thread. When an async operation is called, the program can continue executing the next lines of code while waiting for the async operation to complete.
  * Error Handling: Error handling can be more complex, often requiring callbacks, promises, or async/await syntax.

----------------------------------------------------------------------------------------------------------------------------
---- 1st step => npm init
---- 2nd step => install nodemon --save-dev and after this to run nodemon you have to write in package.json file in "scripts":"nodemon index.js" and run command npm run start

--------------------------------------------------
        req            req
client  ==> web server ==> DataBase server
        res          res 
client <== web server <== DataBase server

req and res is send and get in http format to understand web server(node js)

  1.when client send request to server ,,=>  so which type of request is look like => request line =>post/login,(post, get, put, delete,path) , headers , body (data)
  2. when server responds to client ,,=> status line=> 200 'ok' , headers, body 

---------------------response status---------------------------------

2xx(success) = 200:ok , 201:created, 202:accepted
3xx(redirections) = 301:moved permanently, 302:Found
4xx(client error) = 400:bad request, 401:unauthorised , 403;forbidden, 404:not found, 405:method not allowed
5xx(server error) = 500:internal server error , 502:bad gateway

-----------------------------------------Express------------------------------------------------------------------------
it is a web application framework built on top of Node.js. It provides tools and features that help you create a web server and handle HTTP requests and responses easily.

------- # what .listen method do in node or express
=>The .listen method starts a server and makes it ready to accept requests on a chosen port.

------- # what is endpoint
=> *Each endpoint is tied to a specific HTTP method (GET, POST, PUT, DELETE, etc.).
   *Endpoints are defined using route paths (e.g., /, /submit, /update/:id).
   *Each endpoint has a callback function that handles the request and sends a response back to

------ # what is Middleware
=>Middleware is a function that runs during an HTTP request before it reaches the final handler.. It processes or modifies the request, performs tasks like logging or authentication, and can either pass control to the next function or send a response back to the client.

------------------Mongo DB------------------
 DB Server =>DataBase => collection => Documents
 DB Server => university => student / teacher/ courses => Documents

 installation step => https://www.mongodb.com/=> product=> community edition =>download